# policy = PasswordPolicy.from_names(
#     length=10,
#     uppercase=1,
#     numbers=1,
#     special=1,
#     nonletters=1,
#     strength=0.66
# )


def validate_username(username):
    if not re.match(r"^[A-Za-z0-9_]{3,20}$", username):
        return False
    return True


def validate_email(email):
    if not re.match(r"^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$", email):
        return False
    return True


login_attempts = {}

MAX_ATTEMPTS = 3
BLOCK_TIME = 300

def validate_password(password):
    if len(password) < 10:
        return "Password must be at least 10 characters long"

    if re.search(r'(.)\1\1', password):
        return "Password must not have more than 2 identical characters in a row"

    upper = re.search(r'[A-Z]', password) is not None
    lower = re.search(r'[a-z]', password) is not None
    digit = re.search(r'\d', password) is not None
    special = re.search(r'[!@#$%^&*,.:;? ]', password) is not None

    if not upper:
        return "Password must contain at least one uppercase letter"
    if not lower:
        return "Password must contain at least one lowercase letter"
    if not digit:
        return "Password must contain at least one number"
    if not special:
        return "Password must contain at least one special character"

    if sum([upper, lower, digit, special]) < 3:
        return "Password must contain at least three of the following: uppercase letter, lowercase letter, number, special character"

    return None

def login:

global login_attempts

username = None
        if re.match(r"[^@]+@[^@]+\.[^@]+", identifier):
            cursor.execute('SELECT username FROM accounts WHERE email = %s', (identifier,))
            result = cursor.fetchone()
            if result:
                username = result['username']
        elif is_valid_phone_number_helper(identifier):
            cursor.execute('SELECT username FROM accounts WHERE phone = %s', (identifier,))
            result = cursor.fetchone()
            if result:
                username = result['username']
        else:
            username = identifier

        if username:
            current_time = time.time()
            attempts = login_attempts.get(username, [])
            attempts = [attempt for attempt in attempts if current_time - attempt < BLOCK_TIME]
            login_attempts[username] = attempts

            if len(attempts) >= MAX_ATTEMPTS:
                msg = 'Too many login attempts. Please try again later.'
                return render_template('index.html', msg=msg)

            if not validate_username(username):
                msg = 'Invalid username!'
                return render_template('index.html', msg=msg)

            if not validate_password(password):
                msg = 'Invalid password!'

                login_attempts[username].append(current_time)
                return render_template('index.html', msg=msg)

def register:

print(f"Username entered: {username}")
            if not validate_username(username):
                msg = 'Invalid username!'
                return render_template('register.html', form=form, msg=msg)


            password_error = validate_password(password)
            if password_error:
                msg = f'Invalid password! {password_error}'
                return render_template('register.html', form=form, msg=msg)

            # validation_errors = policy.test(password)
            # if validation_errors:
            #     msg = 'Password does not meet complexity requirements!'
            #     return render_template('register.html', form=form, msg=msg)

